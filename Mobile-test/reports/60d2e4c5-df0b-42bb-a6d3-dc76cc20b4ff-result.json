{"name": "test_login[user0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Could not find a connected Android device in 20000ms\nStacktrace:\nUnknownError: Could not find a connected Android device in 20000ms\n    at getResponseForW3CError (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.ts:1103:34)\n    at asyncHandler (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.ts:507:57)\nThe above error is caused by\nError: Could not find a connected Android device in 20000ms\n    at ADB.getDevicesWithRetry (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-adb\\lib\\tools\\system-calls.js:296:13)\n    at AndroidUiautomator2Driver.getDeviceInfoFromCaps (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\device\\common.js:41:21)\n    at AndroidUiautomator2Driver.createSession (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\lib\\driver.ts:361:30)\n    at AppiumDriver.createSession (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:360:35)", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        config = LocalConfig()\n    \n        opts = UiAutomator2Options()\n        opts.set_capability(\"platformName\", config.PLATFORM_NAME)\n        opts.set_capability(\"automationName\", config.AUTOMATION_NAME)\n        opts.set_capability(\"deviceName\", config.DEVICE_NAME)\n        opts.set_capability(\"platformVersion\", config.PLATFORM_VERSION)\n        opts.set_capability(\"app\", config.APP_PATH)\n        opts.set_capability(\"appPackage\", config.APP_PACKAGE)\n        opts.set_capability(\"appActivity\", config.APP_ACTIVITY)\n        opts.set_capability(\"noReset\", config.NO_RESET)\n        opts.set_capability(\"autoGrantPermissions\", config.AUTO_GRANT_PERMISSIONS)\n        opts.set_capability(\"newCommandTimeout\", config.NEW_COMMAND_TIMEOUT)\n    \n        command_executor = f\"http://{config.APPIUM_HOST}:{config.APPIUM_PORT}\"\n>       driver_instance = Remote(command_executor=command_executor, options=opts)  # âœ…\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:249: in __init__\n    super().__init__(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:263: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:342: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027BF8FD4C20>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Could not find a connected Android device in 20...reateSession (C:\\\\\\\\Users\\\\\\\\pc\\\\\\\\AppData\\\\\\\\Roaming\\\\\\\\npm\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\lib\\\\\\\\appium.js:360:35)\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Could not find a connected Android device in 20000ms\nE       Stacktrace:\nE       UnknownError: Could not find a connected Android device in 20000ms\nE           at getResponseForW3CError (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.ts:1103:34)\nE           at asyncHandler (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.ts:507:57)\nE       The above error is caused by\nE       Error: Could not find a connected Android device in 20000ms\nE           at ADB.getDevicesWithRetry (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-adb\\lib\\tools\\system-calls.js:296:13)\nE           at AndroidUiautomator2Driver.getDeviceInfoFromCaps (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\device\\common.js:41:21)\nE           at AndroidUiautomator2Driver.createSession (C:\\Users\\pc\\.appium\\node_modules\\appium-uiautomator2-driver\\lib\\driver.ts:361:30)\nE           at AppiumDriver.createSession (C:\\Users\\pc\\AppData\\Roaming\\npm\\node_modules\\appium\\lib\\appium.js:360:35)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "parameters": [{"name": "user", "value": "{'email': 'derly+qa02@vitawallet.io', 'password': 'vitawallet'}"}], "start": 1759482331330, "stop": 1759482331330, "uuid": "4397b4e6-9acb-4e58-9182-5a1d9c1b516f", "historyId": "cb43fbe24d4c7dde0fd229d0182b8b9e", "testCaseId": "851f638a1293a2d1aa1b69497a224bb7", "fullName": "tests.test_sample#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sample"}, {"name": "host", "value": "DESKTOP-USD8UUS"}, {"name": "thread", "value": "18808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sample"}], "titlePath": ["tests", "test_sample.py"]}